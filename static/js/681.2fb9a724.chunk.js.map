{"version":3,"file":"static/js/681.2fb9a724.chunk.js","mappings":"qRACaA,EAAUC,EAAAA,EAAAA,IAAH,4EAKPC,EAAOD,EAAAA,EAAAA,GAAH,6C,SCgDjB,EAhDa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KAEA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAmBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEH,GAAU,GADZ,mBAG6BI,EAAAA,EAAAA,IAAaV,GAH1C,OAGUW,EAHV,OAIIP,EAAUO,EAAWC,MAJzB,gDAMIJ,EAAS,CAAED,MAAK,OANpB,yBAQID,GAAU,GARd,6EADc,uBAAC,WAAD,wBAYdO,EACD,GAAE,CAACb,IAECG,GAKH,2BACGE,IAAU,SAACS,EAAA,EAAD,IACVP,IAAS,yDACV,SAACV,EAAD,UACGM,EAAOY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACV,UAACpB,EAAD,WACGoB,GACC,gBAAKC,IAAG,UA9BF,mCA8BE,OAAiBD,GAAgBE,IAAKJ,KAE9C,gBAAKG,IAAG,UA/BN,8DA+BoBC,IAAKJ,EAAMK,MAAM,SAEzC,uBAAIL,KACJ,uBAAIC,MAPKF,EADD,SART,IAsBV,C","sources":["pages/Cast.styled.js","pages/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\nexport const Item = styled.li`\n  list-style: none;\n`;\n","import { fetchCredits } from '../fetch/fetchMovies';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { Wrapper, Item } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState(null);\n  const [isLoad, setIsLoad] = useState(false);\n\n  const [error, setError] = useState(null);\n  const posterURL = 'https://image.tmdb.org/t/p/w200';\n  const noImg = 'https://quotationexpo.com/assets/images/product/avatar.jpg';\n\n  useEffect(() => {\n    async function fetchActorsId() {\n      setIsLoad(true);\n      try {\n        const actorsCast = await fetchCredits(movieId);\n        setActors(actorsCast.cast);\n      } catch (error) {\n        setError({ error });\n      } finally {\n        setIsLoad(false);\n      }\n    }\n    fetchActorsId();\n  }, [movieId]);\n\n  if (!actors) {\n    return null;\n  }\n\n  return (\n    <div>\n      {isLoad && <Loader />}\n      {error && <p>Whoops, something went wrong</p>}\n      <Wrapper>\n        {actors.map(({ id, name, character, profile_path }) => (\n          <Item key={id}>\n            {profile_path ? (\n              <img src={`${posterURL}${profile_path}`} alt={name} />\n            ) : (\n              <img src={`${noImg}`} alt={name} width=\"200\" />\n            )}\n            <p>{name}</p>\n            <p>{character}</p>\n          </Item>\n        ))}\n      </Wrapper>\n    </div>\n  );\n};\nexport default Cast;\n"],"names":["Wrapper","styled","Item","movieId","useParams","useState","actors","setActors","isLoad","setIsLoad","error","setError","useEffect","fetchCredits","actorsCast","cast","fetchActorsId","Loader","map","id","name","character","profile_path","src","alt","width"],"sourceRoot":""}